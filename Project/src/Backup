package core.Manager;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import ErrorChecker.InputValidator;
import core.Player;
import core.Items.Item;
import core.Monsters.Monster;
import core.Skills.SingleSkill;
import core.Skills.WideSkill;

public class BattleManager {
	private List<Object> turnQueue;
	private MonsterManager monsterManager;
	private PlayerManager playerManager;
	private ItemManager itemManager;
	private Scanner scanner;

	private BattleManager(MonsterManager monsterManager, PlayerManager playerManager, ItemManager itemManager) {
		this.monsterManager = monsterManager;
		this.playerManager = playerManager;
		this.itemManager = itemManager;
		this.scanner = new Scanner(System.in);

		this.initializeTurnQueue();
	}

	private void initializeTurnQueue() {
		this.turnQueue = new ArrayList<>();

		// Add the player to the queue
		this.turnQueue.add(playerManager.getSpecificPlayer(0));

		// Add all monsters to the queue
		this.turnQueue.addAll(monsterManager.getAllMonsters());
	}

	// Start entire battle
	public static BattleManager createBattle() {
//		MonsterManager monsterManager = MonsterManager.of(Slime.creation(), Goblin.creation());
		MonsterManager monsterManager = MonsterManager.createRandomMonsterManager(2); // 2 random monsters
		PlayerManager playerManager = PlayerManager.of(new Player());
		ItemManager itemManager = new ItemManager();

		ShopManager shop = new ShopManager();

		// FOR TESTING of Fixed Items | Future Implementation of Shop where you can buy
		// items (Ex. Potions)
		// Generate a fixed shop inventory
		shop.generateFixedInventory(Arrays.asList("Potion_50HP", "Potion_100HP", "ManaPotion_30MP"));
		shop.displayShop();

		// Player buys a potion
		Item boughtItem = shop.buyItem(0); // Buys the first item
		itemManager.addItem(boughtItem);
		itemManager.addItem(boughtItem);

		return new BattleManager(monsterManager, playerManager, itemManager);
	}

	// Player choose target
	public int promptTarget() {
		//View enemies
		this.printMonsterStatus();
		System.out.println("B | Go Back");
		// choose input
		int actionChosen = -1; // hasn't been chosen yet

		// Scan for user input
		while (true) {
			try {
//				actionChosen = this.scanner.nextInt();
				String input = this.scanner.next().trim(); // Read as a string to handle both numbers and letters
	            
	            if (input.equalsIgnoreCase("B")) {
	                return -1; // Return a sentinel value for "Back"
	            }
	            
	            // Parse as integer for other inputs
	            actionChosen = Integer.parseInt(input);
				
				Predicate<Integer> validator = value -> value >= 0 && value < this.monsterManager.getMonsterSize();
				Predicate<Integer> deadValidator = value -> this.monsterManager.getSpecificMonster(value).isAlive();
				if (!InputValidator.validateAndHandle(actionChosen, validator, "Please print the correct input!")
						|| !InputValidator.validateAndHandle(actionChosen, deadValidator, "Enemy is already dead!")) {
					continue;
				}
				break;
			} catch (NumberFormatException e) {
	            // Handle invalid input, e.g., letters or symbols
	            System.out.println("Invalid input. Please enter a valid number or 'B' to go back.");
	        }
		}
		return actionChosen;
	}

	// Player choose iten to use
	public int promptItem() {
		int actionChosen = -1;

		while (true) {
			try {
//				actionChosen = this.scanner.nextInt();
				String input = this.scanner.next().trim(); // Read as a string to handle both numbers and letters
	            
	            if (input.equalsIgnoreCase("B")) {
	                return -1; // Return a sentinel value for "Back"
	            }
	            
	            // Parse as integer for other inputs
	            actionChosen = Integer.parseInt(input);
				Predicate<Integer> validator = value -> value >= 0 && value < this.itemManager.getSize();
				if (!InputValidator.validateAndHandle(actionChosen, validator, "Please print the correct input!")) {
					continue;
				}
				break;
			} catch (NumberFormatException e) {
	            // Handle invalid input, e.g., letters or symbols
	            System.out.println("Invalid input. Please enter a valid number or 'B' to go back.");
	        }
		}
		return actionChosen;
	}

	// Player choose skill
	public int promptSkill() {
		// choose input
		int skillChosen = -1;

//		skillChosen = this.scanner.nextInt();
		while (true) {
			try {
				String input = this.scanner.next().trim(); // Read as a string to handle both numbers and letters
	            
	            if (input.equalsIgnoreCase("B")) {
	                return -1; // Return a sentinel value for "Back"
	            }
	            
	            // Parse as integer for other inputs
	            skillChosen = Integer.parseInt(input);
				Predicate<Integer> validator = value -> value >= 0 && value < this.playerManager.getSpecificPlayer(0).getAllSkills().size();
				boolean manaAvailable = this.playerManager.getSpecificPlayer(0).checkManaAvailable(this.playerManager.getSpecificPlayer(0).getSpecificSkill(skillChosen));
				if (!InputValidator.validateAndHandle(skillChosen, validator, "Please print the correct input!")) {
					continue;
				} else if (!manaAvailable) {
					System.out.println("Not enough mana!");
					continue;	
				}
				break;
			} catch (NumberFormatException e) {
	            // Handle invalid input, e.g., letters or symbols
	            System.out.println("Invalid input. Please enter a valid number or 'B' to go back.");
	        }
		}
		

		return skillChosen;
	}

	// Validation of Options of
	// Basic Attack / Use Items / View Enemies / View Players' Status Validation
	public int promptInput() {
		// choose input
		int inputChosen = -1;

		while (true) {
			try {
				inputChosen = this.scanner.nextInt();

				Predicate<Integer> validator = value -> value >= 0 && value <= 4;
				if (!InputValidator.validateAndHandle(inputChosen, validator, "Please print the correct input!")) {
					continue;
				}
				break;
			} catch (InputMismatchException e) {
				// Handle invalid input, e.g., letters or symbols
				System.out.println("Invalid input. Please enter a valid number.");
				this.scanner.nextLine(); // Clear the invalid input
			}
		}
		;
		return inputChosen;
	}

	// Party's UI
	// Basic Attack / Use Items / View Enemies / View Players' Status Validation
	public void continueBattleSequence() throws InterruptedException {
		boolean playerTurn = true;
		while (playerTurn) {
			switch (this.promptInput()) {
			case 0:
				System.out.println("\nChoose your target!");
				int action = promptTarget();
				if (action != -1) {
					Monster targetMonster = this.monsterManager.getSpecificMonster(action);
					this.playerManager.getSpecificPlayer(0).basicAttack(targetMonster);
					// If Enemy is dead remove him from queue
					this.queueChecker(targetMonster);
					playerTurn = false;
				} else {
					this.generateBattleUI();
				}
				break;
			case 1:
				this.showInventory();
				System.out.println("\nB | Go Back");
				if (!this.itemManager.checkEmpty()) {
					int actionItem = this.promptItem();
					if (actionItem != -1) {
						Item itemChosen = this.itemManager.getAndUseItem(actionItem);
						this.playerManager.getSpecificPlayer(0).useItem(itemChosen);
						playerTurn = false;
					} else {
						this.generateBattleUI();
					}
				}
				break;
			case 2:
				this.printMonsterStatus();
				break;
			case 3:
				this.printPlayerStatus();
				break;
			case 4:
				// Use skill
				// int count = this.prmoptSkill()
				// this.player.getSpecificPlayer(0).useSkill(count)
				if (!this.playerManager.getSpecificPlayer(0).checkEmptySkillTab()) {
					System.out.println(this.playerManager.getSpecificPlayer(0).viewSkills());
					System.out.println("B | Go Back");
					int actionSkill = this.promptSkill();
					if (actionSkill != -1) {
						this.actionAfterChoosingSkill(actionSkill);
						playerTurn = false;
					} else {
						this.generateBattleUI();
					}
				}
				break;
			default:
				System.out.println("Unexpected Error");
			}
		}
	}
	
	public void actionAfterChoosingSkill(int skillIndex) throws InterruptedException {
		Object skillObject = this.playerManager.getSpecificPlayer(0).getSpecificSkill(skillIndex);
		if (skillObject instanceof SingleSkill) {
			Monster targetMonster = this.monsterManager.getSpecificMonster(promptTarget());
			this.playerManager.getSpecificPlayer(0).singleTargetAttack(targetMonster, skillIndex);
		} else if (skillObject instanceof WideSkill) {
			List<Monster> monsterList = this.monsterManager
					.getAllMonsters()
					.stream()
					.filter(monster -> monster.isAlive())
					.collect(Collectors.toList());
			this.playerManager.getSpecificPlayer(0).multiTargetAttack(monsterList, skillIndex);
		}
	}

	// Battle Turn
	public void startBattleSequence() throws InterruptedException {
		this.generateBattleMsg();
		// Loop will end when either enemy or party die
		while (playerManager.getSpecificPlayer(0).isAlive() && !this.monsterManager.checkAllDead()) {
			for (int i = 0; i < this.turnQueue.size(); i++) {
				Object currentEntity = turnQueue.get(i);

				if (currentEntity instanceof Player) {
					// Player's turn
					Player player = (Player) currentEntity;
					if (player.isAlive()) {
						System.out.println("\nPlayer's Turn!");
						this.playerAction();
					}
				} else if (currentEntity instanceof Monster) {
					// Monster's turn
					Monster monster = (Monster) currentEntity;
					if (monster.isAlive()) {
						System.out.println("\n" + monster + "'s Turn!");
						Thread.sleep(2000);
						// Specific Player
						Player target = this.playerManager.getSpecificPlayer(0);
						this.monsterAction(monster, target);
					}
				}

				// Check if battle is over after each turn
				if (!playerManager.getSpecificPlayer(0).isAlive()) {
					System.out.println("\nPlayer has been defeated!");
					return;
				}
				if (monsterManager.checkAllDead()) {
					System.out.println("\nAll monsters have been defeated! Victory!");
					return;
				}
			}
		}
	}

	// Remove from turn queue if dead
	public void queueChecker(Object entity) {
		if (entity instanceof Player && !((Player) entity).isAlive()) {
			this.turnQueue.remove(entity);
		} else if (entity instanceof Monster && !((Monster) entity).isAlive()) {
			this.turnQueue.remove(entity);
		}
	}

	public void monsterAction(Monster monster, Player target) throws InterruptedException {
		monster.basicAttack(target);
		this.queueChecker(target);
		Thread.sleep(4000);
	}

	public void playerAction() throws InterruptedException {
		this.printStatus();
		System.out.println("\nChoose your options!");
		this.generateBattleUI();
		this.continueBattleSequence();
		Thread.sleep(4000);
	}

	public void printMonsterStatus() {
		System.out.println("****Enemies' Status****");
		System.out.println(this.monsterManager.generateMonsterStatus());
	}

	public void printPlayerStatus() {
		System.out.println("****Players' Status****");
		System.out.println(this.playerManager.generatePlayerStatus());
	}

	public void generateBattleUI() {
		System.out.println("****Battle UI****");
		System.out.println(
				"0 | Basic Attack\n" 
		+ "1 | Use Items\n" 
		+ "2 | View Enemies\n" 
		+ "3 | View Players' Statuses\n"
		+ "4 | Use Skills"
		);
	}

	public void generateBattleMsg() {
		System.out.println("----Round 1----");
	}

	public void printStatus() {
		System.out.println("\n****Battle Status****");
		System.out.println("Enemies:");
		System.out.println(this.monsterManager.generateMonsterStatus());
		System.out.println("Players:");
		System.out.println(this.playerManager.generatePlayerStatus());
	}

	public void showInventory() {
		this.itemManager.showInventoryWithIndices();
	}
}
